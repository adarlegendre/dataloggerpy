# Generated by Django 5.0.2 on 2025-06-12 16:11

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='FTPConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('server', models.CharField(default='ftp.example.com', max_length=255)),
                ('port', models.IntegerField(default=21)),
                ('username', models.CharField(max_length=255)),
                ('password', models.CharField(max_length=255)),
                ('remote_directory', models.CharField(default='/uploads', max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'FTP Configuration',
                'verbose_name_plural': 'FTP Configurations',
            },
        ),
        migrations.CreateModel(
            name='NotificationSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('primary_email', models.EmailField(help_text='Primary email address for notifications', max_length=254, validators=[django.core.validators.EmailValidator()])),
                ('frequency', models.CharField(choices=[('hourly', 'Hourly'), ('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly')], default='daily', help_text='How often to send notifications', max_length=10)),
                ('cc_emails', models.TextField(blank=True, help_text='Comma-separated list of CC email addresses')),
                ('smtp_server', models.CharField(help_text='SMTP server address', max_length=255)),
                ('smtp_port', models.IntegerField(default=587, help_text='SMTP server port', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(65535)])),
                ('smtp_username', models.CharField(help_text='SMTP username', max_length=255)),
                ('smtp_password', models.CharField(help_text='SMTP password', max_length=255)),
                ('enable_notifications', models.BooleanField(default=True, help_text='Enable/disable email notifications')),
                ('use_tls', models.BooleanField(default=True, help_text='Use TLS for SMTP connection')),
                ('days_of_week', models.CharField(blank=True, help_text='Comma-separated days of the week (e.g., Monday,Tuesday,Friday)', max_length=100)),
                ('notification_times', models.CharField(blank=True, help_text='Comma-separated times in HH:MM format (e.g., 08:00,14:00)', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Notification Settings',
                'verbose_name_plural': 'Notification Settings',
            },
        ),
        migrations.CreateModel(
            name='RadarConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name to identify this radar', max_length=100)),
                ('port', models.CharField(help_text='Serial port (e.g., COM1, /dev/ttyUSB0)', max_length=50, unique=True)),
                ('baud_rate', models.IntegerField(choices=[(9600, '9600'), (19200, '19200'), (38400, '38400'), (57600, '57600'), (115200, '115200')], default=9600)),
                ('data_bits', models.IntegerField(choices=[(7, '7'), (8, '8')], default=8)),
                ('parity', models.CharField(choices=[('N', 'None'), ('E', 'Even'), ('O', 'Odd')], default='N', max_length=1)),
                ('stop_bits', models.IntegerField(choices=[(1, '1'), (2, '2')], default=1)),
                ('update_interval', models.IntegerField(default=100, help_text='Update interval in milliseconds (min: 50ms, max: 1000ms)')),
                ('file_save_interval', models.IntegerField(default=5, help_text='Interval for saving data to files in minutes (min: 1min, max: 60min)')),
                ('data_storage_path', models.CharField(default='data', help_text='Path to store radar data files', max_length=255)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Radar Configuration',
                'verbose_name_plural': 'Radar Configurations',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='RadarData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('range', models.FloatField(blank=True, help_text='Range measurement in meters', null=True)),
                ('speed', models.FloatField(blank=True, help_text='Speed measurement in m/s', null=True)),
                ('direction', models.FloatField(blank=True, help_text='Direction in degrees', null=True)),
                ('raw_data', models.TextField(blank=True, help_text='Raw data if parsing failed', null=True)),
                ('status', models.CharField(default='success', help_text='Status of the reading', max_length=20)),
                ('connection_status', models.CharField(default='connected', help_text='Connection status', max_length=20)),
            ],
            options={
                'verbose_name': 'Radar Data',
                'verbose_name_plural': 'Radar Data',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='RadarDataFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('filename', models.CharField(help_text='Name of the saved file', max_length=255)),
                ('file_path', models.CharField(help_text='Full path to the saved file', max_length=512)),
                ('timestamp', models.DateTimeField(auto_now_add=True, help_text='When the file was saved')),
                ('record_count', models.IntegerField(help_text='Number of records in the file')),
                ('file_size', models.BigIntegerField(help_text='Size of the file in bytes')),
                ('is_valid', models.BooleanField(default=True, help_text='Whether the file is valid and complete')),
            ],
            options={
                'verbose_name': 'Radar Data File',
                'verbose_name_plural': 'Radar Data Files',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='SystemInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('disk_usage', models.FloatField()),
                ('ram_usage', models.FloatField()),
                ('cpu_temp', models.FloatField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'System Info',
                'verbose_name_plural': 'System Info',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='SystemMetrics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('disk_used_percent', models.FloatField(help_text='Disk usage percentage', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('ram_used_percent', models.FloatField(help_text='RAM usage percentage', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('cpu_temperature', models.FloatField(blank=True, help_text='CPU temperature in Celsius', null=True)),
                ('uptime_seconds', models.IntegerField(help_text='System uptime in seconds')),
            ],
            options={
                'verbose_name': 'System Metric',
                'verbose_name_plural': 'System Metrics',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='SystemSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('system_name', models.CharField(default='Secure Login', max_length=100)),
                ('login_title', models.CharField(default='Welcome Back', max_length=100)),
                ('primary_color', models.CharField(default='#1a237e', max_length=7)),
                ('secondary_color', models.CharField(default='#283593', max_length=7)),
                ('accent_color', models.CharField(default='#3949ab', max_length=7)),
                ('text_color', models.CharField(default='#2b2d42', max_length=7)),
                ('background_color', models.CharField(default='#f8f9fa', max_length=7)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'System Settings',
                'verbose_name_plural': 'System Settings',
            },
        ),
        migrations.CreateModel(
            name='TCPIPConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip_address', models.GenericIPAddressField(default='192.168.1.100')),
                ('gateway', models.GenericIPAddressField(default='192.168.1.1')),
                ('subnet_mask', models.GenericIPAddressField(default='255.255.255.0')),
                ('dns', models.GenericIPAddressField(default='8.8.8.8')),
                ('timeout', models.IntegerField(default=5)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'TCP/IP Configuration',
                'verbose_name_plural': 'TCP/IP Configurations',
            },
        ),
        migrations.CreateModel(
            name='TimeConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timezone', models.CharField(choices=[('UTC', 'UTC'), ('EST', 'EST'), ('PST', 'PST')], default='UTC', max_length=10)),
                ('date_format', models.CharField(choices=[('YYYY-MM-DD', 'YYYY-MM-DD'), ('DD-MM-YYYY', 'DD-MM-YYYY'), ('MM-DD-YYYY', 'MM-DD-YYYY')], default='YYYY-MM-DD', max_length=10)),
                ('time_format', models.CharField(choices=[('24h', '24-hour'), ('12h', '12-hour')], default='24h', max_length=3)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Time Configuration',
                'verbose_name_plural': 'Time Configurations',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('admin', 'Administrator'), ('manager', 'Manager'), ('operator', 'Operator'), ('viewer', 'Viewer')], default='viewer', max_length=20)),
                ('phone_number', models.CharField(blank=True, max_length=15, null=True)),
                ('department', models.CharField(blank=True, max_length=100, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'ordering': ['-date_joined'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddConstraint(
            model_name='radarconfig',
            constraint=models.UniqueConstraint(fields=('name',), name='unique_radar_name'),
        ),
        migrations.AddField(
            model_name='radardata',
            name='radar',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='data', to='app.radarconfig'),
        ),
        migrations.AddField(
            model_name='radardatafile',
            name='radar',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='data_files', to='app.radarconfig'),
        ),
        migrations.AddIndex(
            model_name='systemmetrics',
            index=models.Index(fields=['timestamp'], name='app_systemm_timesta_cdddb8_idx'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to.', related_name='custom_user_set', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='custom_user_set', to='auth.permission', verbose_name='user permissions'),
        ),
        migrations.AddIndex(
            model_name='radardata',
            index=models.Index(fields=['radar', 'timestamp'], name='app_radarda_radar_i_2c53e9_idx'),
        ),
        migrations.AddIndex(
            model_name='radardatafile',
            index=models.Index(fields=['radar', 'timestamp'], name='app_radarda_radar_i_67ab85_idx'),
        ),
    ]
